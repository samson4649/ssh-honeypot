#!/bin/bash

EXT_IFACE=enp1s0
MEM_LIMIT=128M
SERVICE=2222

QUOTA_IN=5242880
QUOTA_OUT=1310720
REMOTE_HOST=$(echo ${REMOTE_HOST} | grep -o '[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}')

{
	CONTAINER_NAME="honeypot-ssh-${REMOTE_HOST}"
	HOSTNAME=$(/bin/hostname)
	HOSTNAME=adm-jumpgw.zone4.border-301.iinet.net.au

	# check if the container exists
	if ! /usr/bin/docker inspect "${CONTAINER_NAME}" &> /dev/null; then
		# create the container
		CONTAINER_ID=$(/usr/bin/docker run --name ${CONTAINER_NAME} -h ${HOSTNAME} -e "REMOTE_HOST=${REMOTE_HOST}" -m ${MEM_LIMIT} --cap-drop=all -d -i honeypot:latest ) ##/sbin/init
		CONTAINER_IP=$(/usr/bin/docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${CONTAINER_ID} )
		PROCESS_ID=$(/usr/bin/docker inspect --format '{{ .State.Pid }}' ${CONTAINER_ID} )

		# drop all inbound and outbound traffic by default
		/usr/bin/nsenter --target ${PROCESS_ID} -n /sbin/iptables -P INPUT DROP
		/usr/bin/nsenter --target ${PROCESS_ID} -n /sbin/iptables -P OUTPUT DROP

		# allow access to the service regardless of quota
		/usr/bin/nsenter --target ${PROCESS_ID} -n /sbin/iptables -A INPUT -p tcp -m tcp --dport ${SERVICE} -j ACCEPT
		/usr/bin/nsenter --target ${PROCESS_ID} -n /sbin/iptables -A INPUT -m quota --quota ${QUOTA_IN} -j ACCEPT

		# allow related outbound access limited by the quota
		/usr/bin/nsenter --target ${PROCESS_ID} -n /sbin/iptables -A OUTPUT -p tcp --sport ${SERVICE} -m state --state ESTABLISHED,RELATED -m quota --quota ${QUOTA_OUT} -j ACCEPT

		# enable the host to connect to rsyslog - disabled
		###/usr/bin/nsenter --target ${PROCESS_ID} -n /sbin/iptables -A OUTPUT -p tcp -m tcp --dst loghost -j ACCEPT

		# add iptables redirection rule
		/sbin/iptables -t net -A PREROUTING -i ${EXT_IFACE} -s ${REMOTE_HOST} -p tcp -m tcp --dport ${SERVICE} -j DNAT --to-destination ${CONTAINER_IP}
		/sbin/iptables -t nat -A POSTROUTING -j MASQUERADE

	else
		# start container if existed and grab cid
		/usr/bin/docker start "${CONTAINER_NAME}" &>/dev/null
		CONTAINER_ID=$(/usr/bin/docker inspect --format '{{ .Id }}' "${CONTAINER_NAME}")
		CONTAINER_IP=$(/usr/bin/docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${CONTAINER_ID} ) 

		# add iptables redirection rules
		/sbin/iptables -t net -A PREROUTING -i ${EXT_IFACE} -s ${REMOTE_HOST} -p tcp -m tcp --dport ${SERVICE} -j DNAT --to-destination ${CONTAINER_IP}
		/sbin/iptables -t nat -A POSTROUTING -j MASQUERADE

	fi
	echo ${CONTAINER_IP}
} &>/dev/null

# forward traffic to the container 
exec /usr/bin/socat stdin tcp:${CONTAINER_IP}:${SERVICE},retry=60
 
		
